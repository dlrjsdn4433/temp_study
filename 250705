const student = function(name){
    this.name = '유관순';
    console.log(`제 이름은 ${this.name}이고, 쟤 이름은${name}입니다.`)
}
// this. 를 이용하면 함수 내부에서 this.name을 정의하는건가?

student('이건우','이건우2');
console.log(this.name);
console.log(name); // this.name의 값이 전역 객체가 된다.

// 1
const introduce = function(name,age){
    console.log(`안녕하세요,${name}님,${age}살이시군요!`)
};

introduce('홍길동',13)


// 2
const add = function(num1,num2){
    console.log(num1+num2);
}

add(1,3);

// 3
const even = function(num){
    if(num%2==0){
        console.log(`${num}(은)는 짝수입니다!`)
    }else{
        console.log(`${num}(은)는 홀수입니다!`)
    }
}

even(4);

// 4
const average = function(nums){
    let len = nums.length;
    let sum = 0;
    nums.forEach(element => {
        sum += element;
    });
    //console.log(sum)
    //console.log(len)
    console.log(sum/len)
        
    ;
}

average([1,2,3,4]);

// 5
const biggest = function(num1,num2,num3){
    if(num1>num2&&num1>num3){
        console.log(num1)
    }
    else if (num2>num1&&num2>num3){
        console.log(num2)
    }
    else if(num3>num1&&num3>num2){
        console.log(num3)
    }

}

biggest(1,2,3)

//6
const square = (n) => console.log(n**2);

square(5);

//7
// const capitalize = function(str){
//     toUpperCase();
//     console.log(str);
// }

// capitalize('asdf');// 해결 불가

//8
const merge = (str1,str2) => {
    console.log(str1+str2)
}

merge('안녕하세요','반갑습니다.')

//9
function callback(arr){
    arr.forEach(text => {
        console.log(`이번 역은 ${text}입니다.`)
        
    });
}

callback(['강남역','미사역','홍대역'])

// 10
function evenNum(arr){
    // arr.filter(n => n%2);
    // console.log(arr); // const로 초기화 하지않으면 filter의 결과가 arr에 남지않는다
    const result  = arr.filter(n => n%2==0);
    console.log(result);
}

evenNum([1,2,3,4,5]);
