# 변수

## 데이터 타입은 값의 종류를 말하며 자바스크립트는 7개의 데이터 타입을 제공한다.

### 1. 숫자 타입

자바스크립트는 하나의 숫자 타입만 존재하고 모든 수를 실수로 처리한다.

- 숫자 타입은 추가적으로 3개의 특별한 값도 표현할 수 있다,
- Infinity : 양의 무한대
- -Infinity : 음의 무한대
- NaN : 산술 연산 불가 (Not a Number)

```jsx
var integer = 10;
var double = 5.5;
var negative = -10;
```

### 2. 문자열 타입

- 문자열 타입은 텍스트 데이터를 표현할 때 사용한다.
- 작은 따옴표(’’), 큰 따옴표(””), 또는 백틱(``)으로 텍스트를 감싼다.
- 템플릿 리터럴 :
    
    멀티라인 문자열, 표현식 삽입 등 편리한 문자열 처리 기능을 제공한다.
    
    작은 따옴표나 큰 따옴표를 사용하지 않고 백틱을 이용한다,
    

```jsx
string = 'javascript';
string = "javascript";
string = `javascript`;

console.log(`제 이름은 ${lastName}${firstName} 입니다.`);
```

### 3. 논리 타입

불리언 타입의 값은 논리적 참, 거짓을 나타내는 true와 false뿐이다.

```jsx
var flag = true;
console.log (flag);
flag = false;
console.log (flag);
```

### 4,5. undefined and null

- undefined 타입의 값은 undefined가 유일하다.
- var 키워드로 선언한 변수는 암묵적으로 undefined로 초기화 된다.
- 자바스크립트 엔진이 변수를 초기화할 때 사용하는 값이므로 개발자가 의도적으로

변수에 할당하는 것은 지양한다.

- null 타입의 값은 null이 유일하다.
- 변수에 값이 없다는 것을 의도적으로 명시할 때 사용한다.

```jsx
var undef;
console.log(undef);
var nullVal = null;
console.log(nullVal);
```

### 6,7. symbol and object

- 심벌은 다른 값과 중복되지 않는 유일무이한 값으로 이름 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다.
- 심벌 이외의 원시 값은 리터럴을 통해 생성하지만 심벌은 Symbol 함수를 호출해 생성한다.

```jsx
var key=Symbol('key');
console.log(typeof key)

var obj = {};
obj[key] = 'value';
console.log(obj[key]);

```

## 동적타입언어

### 정적 타입 언어

변수를 선언할 때 데이터 타입을 사전에 선언

변수의 타입을 변경할 수 없다.

런타임 에러를 줄인다.

### 동적 타입 언어

자바스크립트는 var, let, const 키워드를 통해 변수를 선언할 뿐 데이터 타입을 사전에 선언하지 않는다.

즉, 동적 타입 언어는 재할당에 의해 변수의 타입을 언제든지 변경할 수 있다.

변수의 값을 확인하기 전까지 타입을 확신할 수 없다.

변수를 사용하기 전 데이터 타입 체크를 하기도 하는데 이로 인해 코드의 양도 증가한다.

## 암묵적 타입 변환

개발자의 의도가 아닌 자바스크립트 엔진에 의해 암묵적으로 자동 변환 되는 것을 암묵적 타입 변환이라고 한다.

암묵적 타입 변환은 드러나지 않으므로 변환된 타입 결과를 예측할 수 있어야 오류를 방지할 수 있다.

### 1. 문자열 타입으로 변환

문자열 연결 연결 자는 문자열 타입이 아닌 피 연산자를 문자열 타입으로 암묵적으로 변환한다.

```jsx
console.log(1+''); // "1"
console.log(NaN + ""); // "NaN"
console.log(Infinity + '');
console.log(true + '')
console.log(null +'');
console.log(undefined +'');
console.log(Symbol()+'');
console.log({}+"");
console.log([]+"");
console.log(function(){}+"");
```

### 2. 숫자 타입으로 변환

산술 연산자의 피 연산자는 모두 숫자여야 하므로 숫자가 아닌 피 연산자를 숫자 타입으로 암묵적으로 변환한다.

비교 연산자로 크기 비교를 위해 모두 숫자여야 하므로 피 숫자가 아닌 피 연산자를 숫자 타입으로 암묵적으로 변환한다.

+ 단항 연산자는 피 연산자가 숫자 타입의 값이 아니면 숫자 타입의 값으로 암묵적으로 변환한다.

```jsx
console.log(10 - '5');
console.log(10*'54');
console.log(10/'2');
console.log(10%'javascript');
console.log(+'');
console.log(+'1');
console.log(+'javascript');
console.log(+true);
console.log(+false);
console.log(+null);
console.log(+undefined);
console.log(+Symbol());
console.log(+{});
console.log(+[]);
console.log(+function(){});
```

### 3. 논리 타입으로 변환

자바스크립트 엔진은 불리언 값이 아닌 값을 Truthy 또는 Falsy 값으로 변환한다.

Truthy → true, Falsy → false로 암묵적 타입 변환된다.

```jsx
if(true) console.log('if(true)');
if(false) console.log('if(false)');
if(undefined) console.log("if(undefinded)");
if(null) console.log('if(null)');
if(0) console.log('if(0)');
if(NaN) console.log('if(NaN)');
if('') console.log('if("")');
```

## 명시적 타입 변환

개발자의 의도에 따라 값의 타입을 변환하는 것이다. 자바스크립트에서 기본 제공하는 표준 빌트인 생성자 함수(String, Number, Boolean)를 new 연산자 없이 호출하는 방법, 빌트인 메서드를 사용하는 방법, 암묵적 타입 변환을 이용하는 방법이 있다.

### 1. 문자열 타입으로 변환

String 생성자함수를 new 연산자 없이 호출한다.

Object.prototype.toString 메서드를 사용한다.

문자열 연결 연산자를 사용한다.

```jsx
console.log(String(10)); // "10"
console.log(String(NaN)); // "NaN"
console.log(String(Infinity)); // "Infinity"
console.log(String(true)); // "true"
console.log(String(false)); // "false"

console.log((10).toString());
console.log((NaN).toString());
console.log((Infinity).toString());
console.log((true).toString());
console.log((false).toString());
```

### 2. 숫자 타입으로 변환

Number 생성자 함수를 new 연산자 없이 호출한다.

parseInt, parseFloat 함수를 이용한다 (문자열 → 숫자만 가능)

 + 단항 산술 연산자를 이용한다.

산술 연산자를 이용한다.

```jsx
console.log(Number('10'));
console.log(Number('10.01'));
console.log(Number(true));
console.log(Number(false));

console.log(parseInt('10'));
console.log(parseFloat('10'));
console.log(parseInt('10.01'));
console.log(parseFloat('10.01'));
console.log(parseFloat('10.01'));

onsole.log('10'*1);
console.log(typeof ('10'*1));
console.log('10.01'*1);
console.log(typeof('10.01'*1));
console.log(true*1);
console.log(false*1);
```

### 3. 논리 타입으로 변환

Boolean 생성자 함수를 new 연산자 없이 호출한다.

```jsx
console.log(Boolean('javescript'));
console.log(Boolean(''));
console.log(Boolean(1));
console.log(Boolean(0));
console.log(Boolean(NaN));
console.log(Boolean(Infinity));
console.log(Boolean(null));
console.log(Boolean(undefined));
console.log(Boolean({}));
console.log(Boolean([]));
```

# 연산자

## 비교 연산자

비교 연산자는 좌항과 우항의 비교 연산자를 비교한  다음 그 결과를 불리어 값으로 반환한다.

if문이나 for문과 같은 제어문의 조건식에서 주로 사용한다.

### 동등/일치 비교 연산자

동등 비교 : 암묵적 타입 변환을 통해 타입을 일치시키고 같은 값인지 비교한다.

일치 비교 : 타입과 값이 모두 일치하는지 비교한다.

```jsx
// 숫자 1, 문자 '1', true 비교
console.log(`1 == '1' : ${1=="1"}`);
console.log(`1 == true : ${1==true}`);

console.log(`1 === '1' : ${1==="1"}`);
console.log(`1 === true : ${1===true}`);

// 숫자 0, 문자 '0', 빈 문자열, false 비교
console.log(`0 == '0' : ${0 == '0'}`);
console.log(`0 == '' : ${0 == ''}`);
console.log(`0 == false : ${0 == false}`);

console.log(`0 === '0' : ${0 === '0'}`);
console.log(`0 === '' : ${0 === ''}`);
console.log(`0 === false : ${0 === false}`);

// null 과 undefined 비교
console.log(`null == undefined : ${null == undefined}`);
console.log(`null === undefined : ${null === undefined}`);

// NaN은 자신과 일치하지 않는 유일한 값이다.
console.log(`NaN == NaN ${NaN == NaN}`);
console.log(`NaN === NaN ${NaN === NaN}`);

// 빌트인 함수 Number.isNaN()을 사용해서 확인해야 한다.
console.log(`Number.isNaN(NaN) : ${Number.isNaN(NaN)}`);

/* 비교 연산자를 통해문자열 끼리 비교도 가능하며 유니코드 순으로 비교한다. */
console.log(`'hello' === 'hello' : ${'hello' === 'hello'}`);
console.log(`'hello' !== 'hello' : ${'hello' !== 'hello'}`);

console.log(`'apple' < 'banana' : ${'apple' < 'banana'}`);
console.log(`'apple' > 'banana' : ${'apple' > 'banana'}`);
console.log(`'cat' >= 'Zoo' : ${'cat' > 'Zoo'}`); // 대문자가 소문자보다 작다.
```

## 논리 연산자

||(OR)연산자 : 좌항과 우항중 한 개만 Truthy한 값이면 true로 평가된다

&&(and) : 좌항과 우항 모두 Truthy한 값이어야 true로 평가된다

### 단축 평가

표현식을 평가하는 도중 결과가 확정된 경우 나머지 평가 과정을 생략하는 것을 말한다.

```jsx
// OR의 경우 'apple'이 이미 Truthy한 값이여서 true로 평가되고
// 논리 연산의 결과를 결정한 첫 번째 피연산자 apple을 그대로 반환한다.
console.log('apple' || 'banana');
console.log(false || 'banana');
console.log('apple' || false); 

// AND의 경우 좌항, 우항 모두 확인해야 하므로
// 논리 연산의 결과를 결정한 두 번째 피연산자'banana'를 그대로 반환한다.
console.log('apple' && 'banana');
console.log(false && 'banana');
console.log('apple' && false);

var num = 1;
if (num % 2 == 0)
    console.log('짝수입니다,');
else
    console.log('홀수입니다.');
// 단축평가를 사용하면 if문을 대체할 수 있다.
num % 2 == 0 && console.log('홀수입니다.');
num % 2 == 0 || console.log('홀수입니다.');
```

## ES11 operator

### 옵셔널 체인지 연산자

좌항의 피연산자가 null 또는 undefined인 경우 undefined를 반환하고 그렇지 않으면 우항의 프로퍼티 참조를 이어간다

### null 병합 연산자

좌항의 피연산자가 null 또는 undefined인 경우 우항의 피연산자를 반환하고, 그렇지 않으면 좌항의 피 연산자를 반환한다.

변수에 기본 값을 설정할 때 유용하다.

```jsx
var obj = null;
var val = obj?.value;
console.log(val);

/* 02_null 병합 연산자 */
var test = null ?? '기본 값';
console.log(test);

```
